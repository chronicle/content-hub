name: 'Comment on Validation Failure'

on:
  workflow_run:
    workflows: ["Validate Marketplace Integrations"]
    types:
      - completed

permissions:
  pull-requests: write

jobs:
  post_comment:
    runs-on: ubuntu-latest

    if: github.event.workflow_run.conclusion == 'failure'

    steps:
      # ====================================================================
      # DEBUG STEP 1: See what artifacts GitHub thinks are available for this run.
      # This will help us confirm if the artifact was ever uploaded successfully.
      # ====================================================================
      - name: 'DEBUG: List available artifacts for this workflow run'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = ${{ github.event.workflow_run.id }};
            try {
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner,
                repo,
                run_id,
              });
              console.log(`Found ${artifacts.data.total_count} artifacts for run ID ${run_id}:`);
              for (const artifact of artifacts.data.artifacts) {
                console.log(`  - ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes)`);
              }
              if (artifacts.data.total_count === 0) {
                core.setFailed('No artifacts were found. The upload in the previous workflow likely failed.');
              }
            } catch (error) {
              console.error(`Error fetching artifacts: ${error.message}`);
              core.setFailed(error.message);
            }

      - name: Download validation report
        uses: actions/download-artifact@v4
        with:
          name: validation-report-md
          run-id: ${{ github.event.workflow_run.id }}

      # ====================================================================
      # DEBUG STEP 2: List all files and directories after download.
      # This will show us EXACTLY where the file was downloaded to, if at all.
      # ====================================================================
      - name: 'DEBUG: List files in the current directory'
        run: |
          echo "Current working directory is: $PWD"
          echo "Listing all files and directories recursively..."
          ls -R

      - name: Comment on PR with Collapsible Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // By default, download-artifact v4 places files in the current directory.
            const reportPath = './validation_report.md';
            
            console.log(`Attempting to read report from path: ${reportPath}`);

            if (!fs.existsSync(reportPath)) {
              console.log('--- DEBUG INFO ---');
              console.log('Validation report file not found at the expected path.');
              console.log('Please check the "List files" step above to see where the file was actually downloaded.');
              console.log('--- END DEBUG INFO ---');
              core.setFailed('Report file does not exist after download.');
              return;
            }
            const reportBody = fs.readFileSync(reportPath, 'utf8');
            
            // The rest of your script...
            const response = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${github.event.workflow_run.head_repository.owner.login}:${github.event.workflow_run.head_branch}`
            });
            const pr = response.data[0];
            if (!pr) {
              console.log('No matching PR found for this workflow run.');
              return;
            }

            const finalComment = `‚ùå **Marketplace Validation Failed**
            <details>
            <summary>Click to view the full validation report</summary>
            
            ---
            
            ${reportBody}
            
            </details>`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: finalComment
            });
